
from importlib.abc import Traversable
from importlib.resources import files

from os import environ as osEnviron
from shutil import copy as shellCopy

from pathlib import Path

from unittest import TestSuite
from unittest import main as unitTestMain

from tests.TestBase import TestBase
from versionoverlord.Common import ENV_PROJECT
from versionoverlord.Common import ENV_PROJECTS_BASE

from versionoverlord.Common import TRAVIS_CI_YAML
from versionoverlord.travisci.HandleTravisCI import HandleTravisCI


# import the class you want to test here
# from org.pyut.template import template


class TestTravisCI(TestBase):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 04 August 2025
    """
    keep: bool = False

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

        if 'KEEP' in osEnviron:
            keep: str = osEnviron["KEEP"]
            if keep.lower().strip() == 'true':
                cls.keep = True
            else:
                cls.keep = False
        else:
            print(f'No need to keep data files')
            cls.keep = False

    def setUp(self):
        super().setUp()
        self._destinationUnitTestTravisCIPath: Path = self._tmpProjectDir / Path(TRAVIS_CI_YAML)

    def tearDown(self):
        super().tearDown()
        # cleanup
        # noinspection PySimplifyBooleanCheck
        if TestTravisCI.keep is False:
            TestBase.deleteDirectory(self._tmpProjectsBase)

    def testUpdate(self):
        self._copyTestConfigurationFileToUnitTestProject()

        osEnviron[ENV_PROJECTS_BASE] = str(self._tmpProjectsBase)
        osEnviron[ENV_PROJECT]       = self._tmpProjectDir.name

        handleTravisCI: HandleTravisCI = HandleTravisCI(packages=TestBase.TEST_PACKAGES)

        handleTravisCI.update()
        status: int = TestBase.runDiff(goldenFilename=TRAVIS_CI_YAML,
                                       generatedFileName=self._destinationUnitTestTravisCIPath
                                       )

        self.assertEqual(0, status, 'config.yml not correctly updated')

    def _copyTestConfigurationFileToUnitTestProject(self):

        traversable: Traversable = files(TestBase.RESOURCES_TEST_DATA_PACKAGE_NAME) / TRAVIS_CI_YAML

        testYamlFile:     str = str(traversable)
        testDataTravisPath: Path = Path(testYamlFile)

        self.logger.debug(f'Copy to: {self._destinationUnitTestTravisCIPath}')
        shellCopy(testDataTravisPath, self._destinationUnitTestTravisCIPath)


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestTravisCI))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
